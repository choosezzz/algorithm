package newcoder;

/**
 * @Author dingshuangen
 * @Date 2020/11/16 22:29
 * <p>
 * 每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。
 * HF作为牛客的资深元老,自然也准备了一些小游戏。
 * 其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。
 * 然后,他随机指定一个数m,让编号为0的小朋友开始报数。
 * 每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,
 * 从他的下一个小朋友开始,继续0...m-1报数....
 * 这样下去....直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。
 * 请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)
 */
public class Offer046 {
    /**
     *
     * 比如：arr = [0 1 2 3 4]， m = 3
     * 第一次：删除2 ，变成 arr = [0 1 3 4]
     * 第二次，删除0，变成 arr = [1 3 4]
     * 第三次，删除4，变成 arr = [1 3]
     * 第四次，删除1，变成 arr = [3]
     *
     * 假设f(n, m) 表示最终留下元素的序号。比如上例子中表示为:f(5,3) = 3
     *
     * 首先，长度为 n 的序列会先删除第 m % n 个元素，然后剩下一个长度为 n - 1 的序列。
     * 那么，我们可以递归地求解 f(n - 1, m)，就可以知道对于剩下的 n - 1 个元素，最终会留下第几个元素，
     * 我们设答案为 x = f(n - 1, m)。
     *
     * 由于我们删除了第 m % n 个元素，将序列的长度变为 n - 1。当我们知道了 f(n - 1, m) 对应的答案 x 之后，
     * 我们也就可以知道，长度为 n 的序列最后一个删除的元素，应当是从 m % n 开始数的第 x 个元素。
     * 因此有 f(n, m) = (m % n + x) % n = (m + x) % n。
     *
     * 当n等于1时，f(1,m) = 0
     *
     *
     * @param n
     * @param m
     * @return
     */
    public int LastRemaining_Solution(int n, int m) {
        if (n == 0 || m == 0) {
            return -1;
        }
        int s = 0;
        for (int i = 2; i <= n; i++) {
            s = (s + m) % i;
        }
        return s;
    }
}
